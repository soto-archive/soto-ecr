// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Ecr {

    public struct DescribeRepositoriesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "maxResults", required: false, type: .integer), 
            AWSShapeProperty(label: "repositoryNames", required: false, type: .list), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The maximum number of repository results returned by DescribeRepositories in paginated output. When this parameter is used, DescribeRepositories only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeRepositories request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then DescribeRepositories returns up to 100 results and a nextToken value, if applicable.
        public let maxResults: Int32?
        /// A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.
        public let repositoryNames: [String]?
        /// The nextToken value returned from a previous paginated DescribeRepositories request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The AWS account ID associated with the registry that contains the repositories to be described. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(maxResults: Int32? = nil, repositoryNames: [String]? = nil, nextToken: String? = nil, registryId: String? = nil) {
            self.maxResults = maxResults
            self.repositoryNames = repositoryNames
            self.nextToken = nextToken
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            self.repositoryNames = dictionary["repositoryNames"] as? [String]
            self.nextToken = dictionary["nextToken"] as? String
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct ListImagesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "imageIds", required: false, type: .list)
        ]
        /// The nextToken value to include in a future ListImages request. When the results of a ListImages request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of image IDs for the requested repository.
        public let imageIds: [ImageIdentifier]?

        public init(nextToken: String? = nil, imageIds: [ImageIdentifier]? = nil) {
            self.nextToken = nextToken
            self.imageIds = imageIds
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let imageIds = dictionary["imageIds"] as? [[String: Any]] {
                self.imageIds = try imageIds.map({ try ImageIdentifier(dictionary: $0) })
            } else { 
                self.imageIds = nil
            }
        }
    }

    public struct AuthorizationData: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "authorizationToken", required: false, type: .string), 
            AWSShapeProperty(label: "expiresAt", required: false, type: .timestamp), 
            AWSShapeProperty(label: "proxyEndpoint", required: false, type: .string)
        ]
        /// A base64-encoded string that contains authorization data for the specified Amazon ECR registry. When the string is decoded, it is presented in the format user:password for private registry authentication using docker login.
        public let authorizationToken: String?
        /// The Unix time in seconds and milliseconds when the authorization token expires. Authorization tokens are valid for 12 hours.
        public let expiresAt: String?
        /// The registry URL to use for this authorization token in a docker login command. The Amazon ECR registry URL format is https://aws_account_id.dkr.ecr.region.amazonaws.com. For example, https://012345678910.dkr.ecr.us-east-1.amazonaws.com.. 
        public let proxyEndpoint: String?

        public init(authorizationToken: String? = nil, expiresAt: String? = nil, proxyEndpoint: String? = nil) {
            self.authorizationToken = authorizationToken
            self.expiresAt = expiresAt
            self.proxyEndpoint = proxyEndpoint
        }

        public init(dictionary: [String: Any]) throws {
            self.authorizationToken = dictionary["authorizationToken"] as? String
            self.expiresAt = dictionary["expiresAt"] as? String
            self.proxyEndpoint = dictionary["proxyEndpoint"] as? String
        }
    }

    public struct BatchDeleteImageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "failures", required: false, type: .list), 
            AWSShapeProperty(label: "imageIds", required: false, type: .list)
        ]
        /// Any failures associated with the call.
        public let failures: [ImageFailure]?
        /// The image IDs of the deleted images.
        public let imageIds: [ImageIdentifier]?

        public init(failures: [ImageFailure]? = nil, imageIds: [ImageIdentifier]? = nil) {
            self.failures = failures
            self.imageIds = imageIds
        }

        public init(dictionary: [String: Any]) throws {
            if let failures = dictionary["failures"] as? [[String: Any]] {
                self.failures = try failures.map({ try ImageFailure(dictionary: $0) })
            } else { 
                self.failures = nil
            }
            if let imageIds = dictionary["imageIds"] as? [[String: Any]] {
                self.imageIds = try imageIds.map({ try ImageIdentifier(dictionary: $0) })
            } else { 
                self.imageIds = nil
            }
        }
    }

    public struct DescribeImagesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "imageDetails", required: false, type: .list)
        ]
        /// The nextToken value to include in a future DescribeImages request. When the results of a DescribeImages request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of ImageDetail objects that contain data about the image.
        public let imageDetails: [ImageDetail]?

        public init(nextToken: String? = nil, imageDetails: [ImageDetail]? = nil) {
            self.nextToken = nextToken
            self.imageDetails = imageDetails
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            if let imageDetails = dictionary["imageDetails"] as? [[String: Any]] {
                self.imageDetails = try imageDetails.map({ try ImageDetail(dictionary: $0) })
            } else { 
                self.imageDetails = nil
            }
        }
    }

    public struct DeleteRepositoryResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "repository", required: false, type: .structure)
        ]
        /// The repository that was deleted.
        public let repository: Repository?

        public init(repository: Repository? = nil) {
            self.repository = repository
        }

        public init(dictionary: [String: Any]) throws {
            if let repository = dictionary["repository"] as? [String: Any] { self.repository = try Ecr.Repository(dictionary: repository) } else { self.repository = nil }
        }
    }

    public struct Layer: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "layerSize", required: false, type: .long), 
            AWSShapeProperty(label: "layerAvailability", required: false, type: .enum), 
            AWSShapeProperty(label: "mediaType", required: false, type: .string), 
            AWSShapeProperty(label: "layerDigest", required: false, type: .string)
        ]
        /// The size, in bytes, of the image layer.
        public let layerSize: Int64?
        /// The availability status of the image layer.
        public let layerAvailability: LayerAvailability?
        /// The media type of the layer, such as application/vnd.docker.image.rootfs.diff.tar.gzip or application/vnd.oci.image.layer.v1.tar+gzip.
        public let mediaType: String?
        /// The sha256 digest of the image layer.
        public let layerDigest: String?

        public init(layerSize: Int64? = nil, layerAvailability: LayerAvailability? = nil, mediaType: String? = nil, layerDigest: String? = nil) {
            self.layerSize = layerSize
            self.layerAvailability = layerAvailability
            self.mediaType = mediaType
            self.layerDigest = layerDigest
        }

        public init(dictionary: [String: Any]) throws {
            self.layerSize = dictionary["layerSize"] as? Int64
            if let layerAvailability = dictionary["layerAvailability"] as? String { self.layerAvailability = LayerAvailability(rawValue: layerAvailability) } else { self.layerAvailability = nil }
            self.mediaType = dictionary["mediaType"] as? String
            self.layerDigest = dictionary["layerDigest"] as? String
        }
    }

    public struct DescribeImagesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "maxResults", required: false, type: .integer), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "imageIds", required: false, type: .list), 
            AWSShapeProperty(label: "filter", required: false, type: .structure), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The maximum number of repository results returned by DescribeImages in paginated output. When this parameter is used, DescribeImages only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another DescribeImages request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then DescribeImages returns up to 100 results and a nextToken value, if applicable.
        public let maxResults: Int32?
        /// The nextToken value returned from a previous paginated DescribeImages request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The list of image IDs for the requested repository.
        public let imageIds: [ImageIdentifier]?
        /// The filter key and value with which to filter your DescribeImages results.
        public let filter: DescribeImagesFilter?
        /// A list of repositories to describe. If this parameter is omitted, then all repositories in a registry are described.
        public let repositoryName: String
        /// The AWS account ID associated with the registry that contains the repository in which to describe images. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, imageIds: [ImageIdentifier]? = nil, filter: DescribeImagesFilter? = nil, repositoryName: String, registryId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.imageIds = imageIds
            self.filter = filter
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
            if let imageIds = dictionary["imageIds"] as? [[String: Any]] {
                self.imageIds = try imageIds.map({ try ImageIdentifier(dictionary: $0) })
            } else { 
                self.imageIds = nil
            }
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Ecr.DescribeImagesFilter(dictionary: filter) } else { self.filter = nil }
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct ImageIdentifier: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "imageTag", required: false, type: .string), 
            AWSShapeProperty(label: "imageDigest", required: false, type: .string)
        ]
        /// The tag used for the image.
        public let imageTag: String?
        /// The sha256 digest of the image manifest.
        public let imageDigest: String?

        public init(imageTag: String? = nil, imageDigest: String? = nil) {
            self.imageTag = imageTag
            self.imageDigest = imageDigest
        }

        public init(dictionary: [String: Any]) throws {
            self.imageTag = dictionary["imageTag"] as? String
            self.imageDigest = dictionary["imageDigest"] as? String
        }
    }

    public struct DeleteRepositoryPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "policyText", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string)
        ]
        /// The JSON repository policy that was deleted from the repository.
        public let policyText: String?
        /// The registry ID associated with the request.
        public let registryId: String?
        /// The repository name associated with the request.
        public let repositoryName: String?

        public init(policyText: String? = nil, registryId: String? = nil, repositoryName: String? = nil) {
            self.policyText = policyText
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.policyText = dictionary["policyText"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.repositoryName = dictionary["repositoryName"] as? String
        }
    }

    public struct LayerFailure: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "layerDigest", required: false, type: .string), 
            AWSShapeProperty(label: "failureCode", required: false, type: .enum), 
            AWSShapeProperty(label: "failureReason", required: false, type: .string)
        ]
        /// The layer digest associated with the failure.
        public let layerDigest: String?
        /// The failure code associated with the failure.
        public let failureCode: LayerFailureCode?
        /// The reason for the failure.
        public let failureReason: String?

        public init(layerDigest: String? = nil, failureCode: LayerFailureCode? = nil, failureReason: String? = nil) {
            self.layerDigest = layerDigest
            self.failureCode = failureCode
            self.failureReason = failureReason
        }

        public init(dictionary: [String: Any]) throws {
            self.layerDigest = dictionary["layerDigest"] as? String
            if let failureCode = dictionary["failureCode"] as? String { self.failureCode = LayerFailureCode(rawValue: failureCode) } else { self.failureCode = nil }
            self.failureReason = dictionary["failureReason"] as? String
        }
    }

    public struct ImageFailure: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "imageId", required: false, type: .structure), 
            AWSShapeProperty(label: "failureCode", required: false, type: .enum), 
            AWSShapeProperty(label: "failureReason", required: false, type: .string)
        ]
        /// The image ID associated with the failure.
        public let imageId: ImageIdentifier?
        /// The code associated with the failure.
        public let failureCode: ImageFailureCode?
        /// The reason for the failure.
        public let failureReason: String?

        public init(imageId: ImageIdentifier? = nil, failureCode: ImageFailureCode? = nil, failureReason: String? = nil) {
            self.imageId = imageId
            self.failureCode = failureCode
            self.failureReason = failureReason
        }

        public init(dictionary: [String: Any]) throws {
            if let imageId = dictionary["imageId"] as? [String: Any] { self.imageId = try Ecr.ImageIdentifier(dictionary: imageId) } else { self.imageId = nil }
            if let failureCode = dictionary["failureCode"] as? String { self.failureCode = ImageFailureCode(rawValue: failureCode) } else { self.failureCode = nil }
            self.failureReason = dictionary["failureReason"] as? String
        }
    }

    public struct BatchGetImageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "failures", required: false, type: .list), 
            AWSShapeProperty(label: "images", required: false, type: .list)
        ]
        /// Any failures associated with the call.
        public let failures: [ImageFailure]?
        /// A list of image objects corresponding to the image references in the request.
        public let images: [Image]?

        public init(failures: [ImageFailure]? = nil, images: [Image]? = nil) {
            self.failures = failures
            self.images = images
        }

        public init(dictionary: [String: Any]) throws {
            if let failures = dictionary["failures"] as? [[String: Any]] {
                self.failures = try failures.map({ try ImageFailure(dictionary: $0) })
            } else { 
                self.failures = nil
            }
            if let images = dictionary["images"] as? [[String: Any]] {
                self.images = try images.map({ try Image(dictionary: $0) })
            } else { 
                self.images = nil
            }
        }
    }

    public enum LayerAvailability: String, CustomStringConvertible {
        case available = "AVAILABLE"
        case unavailable = "UNAVAILABLE"
        public var description: String { return self.rawValue }
    }

    public struct SetRepositoryPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "policyText", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string)
        ]
        /// The JSON repository policy text applied to the repository.
        public let policyText: String?
        /// The registry ID associated with the request.
        public let registryId: String?
        /// The repository name associated with the request.
        public let repositoryName: String?

        public init(policyText: String? = nil, registryId: String? = nil, repositoryName: String? = nil) {
            self.policyText = policyText
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.policyText = dictionary["policyText"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.repositoryName = dictionary["repositoryName"] as? String
        }
    }

    public struct GetAuthorizationTokenRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "registryIds", required: false, type: .list)
        ]
        /// A list of AWS account IDs that are associated with the registries for which to get authorization tokens. If you do not specify a registry, the default registry is assumed.
        public let registryIds: [String]?

        public init(registryIds: [String]? = nil) {
            self.registryIds = registryIds
        }

        public init(dictionary: [String: Any]) throws {
            self.registryIds = dictionary["registryIds"] as? [String]
        }
    }

    public enum LayerFailureCode: String, CustomStringConvertible {
        case invalidlayerdigest = "InvalidLayerDigest"
        case missinglayerdigest = "MissingLayerDigest"
        public var description: String { return self.rawValue }
    }

    public struct ImageDetail: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "imageSizeInBytes", required: false, type: .long), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string), 
            AWSShapeProperty(label: "imageDigest", required: false, type: .string), 
            AWSShapeProperty(label: "imageTags", required: false, type: .list), 
            AWSShapeProperty(label: "imagePushedAt", required: false, type: .timestamp), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The size, in bytes, of the image in the repository.  Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the docker images command shows the uncompressed image size, so it may return a larger image size than the image sizes returned by DescribeImages. 
        public let imageSizeInBytes: Int64?
        /// The name of the repository to which this image belongs.
        public let repositoryName: String?
        /// The sha256 digest of the image manifest.
        public let imageDigest: String?
        /// The list of tags associated with this image.
        public let imageTags: [String]?
        /// The date and time, expressed in standard JavaScript date format, at which the current image was pushed to the repository. 
        public let imagePushedAt: String?
        /// The AWS account ID associated with the registry to which this image belongs.
        public let registryId: String?

        public init(imageSizeInBytes: Int64? = nil, repositoryName: String? = nil, imageDigest: String? = nil, imageTags: [String]? = nil, imagePushedAt: String? = nil, registryId: String? = nil) {
            self.imageSizeInBytes = imageSizeInBytes
            self.repositoryName = repositoryName
            self.imageDigest = imageDigest
            self.imageTags = imageTags
            self.imagePushedAt = imagePushedAt
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.imageSizeInBytes = dictionary["imageSizeInBytes"] as? Int64
            self.repositoryName = dictionary["repositoryName"] as? String
            self.imageDigest = dictionary["imageDigest"] as? String
            self.imageTags = dictionary["imageTags"] as? [String]
            self.imagePushedAt = dictionary["imagePushedAt"] as? String
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct GetAuthorizationTokenResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "authorizationData", required: false, type: .list)
        ]
        /// A list of authorization token data objects that correspond to the registryIds values in the request.
        public let authorizationData: [AuthorizationData]?

        public init(authorizationData: [AuthorizationData]? = nil) {
            self.authorizationData = authorizationData
        }

        public init(dictionary: [String: Any]) throws {
            if let authorizationData = dictionary["authorizationData"] as? [[String: Any]] {
                self.authorizationData = try authorizationData.map({ try AuthorizationData(dictionary: $0) })
            } else { 
                self.authorizationData = nil
            }
        }
    }

    public struct InitiateLayerUploadResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "uploadId", required: false, type: .string), 
            AWSShapeProperty(label: "partSize", required: false, type: .long)
        ]
        /// The upload ID for the layer upload. This parameter is passed to further UploadLayerPart and CompleteLayerUpload operations.
        public let uploadId: String?
        /// The size, in bytes, that Amazon ECR expects future layer part uploads to be.
        public let partSize: Int64?

        public init(uploadId: String? = nil, partSize: Int64? = nil) {
            self.uploadId = uploadId
            self.partSize = partSize
        }

        public init(dictionary: [String: Any]) throws {
            self.uploadId = dictionary["uploadId"] as? String
            self.partSize = dictionary["partSize"] as? Int64
        }
    }

    public struct BatchGetImageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "acceptedMediaTypes", required: false, type: .list), 
            AWSShapeProperty(label: "imageIds", required: true, type: .list), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The accepted media types for the request. Valid values: application/vnd.docker.distribution.manifest.v1+json | application/vnd.docker.distribution.manifest.v2+json | application/vnd.oci.image.manifest.v1+json 
        public let acceptedMediaTypes: [String]?
        /// A list of image ID references that correspond to images to describe. The format of the imageIds reference is imageTag=tag or imageDigest=digest.
        public let imageIds: [ImageIdentifier]
        /// The repository that contains the images to describe.
        public let repositoryName: String
        /// The AWS account ID associated with the registry that contains the images to describe. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(acceptedMediaTypes: [String]? = nil, imageIds: [ImageIdentifier], repositoryName: String, registryId: String? = nil) {
            self.acceptedMediaTypes = acceptedMediaTypes
            self.imageIds = imageIds
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.acceptedMediaTypes = dictionary["acceptedMediaTypes"] as? [String]
            guard let imageIds = dictionary["imageIds"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("imageIds") }
            self.imageIds = try imageIds.map({ try ImageIdentifier(dictionary: $0) })
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct DeleteRepositoryPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The AWS account ID associated with the registry that contains the repository policy to delete. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository that is associated with the repository policy to delete.
        public let repositoryName: String

        public init(registryId: String? = nil, repositoryName: String) {
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct GetDownloadUrlForLayerResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "layerDigest", required: false, type: .string), 
            AWSShapeProperty(label: "downloadUrl", required: false, type: .string)
        ]
        /// The digest of the image layer to download.
        public let layerDigest: String?
        /// The pre-signed Amazon S3 download URL for the requested layer.
        public let downloadUrl: String?

        public init(layerDigest: String? = nil, downloadUrl: String? = nil) {
            self.layerDigest = layerDigest
            self.downloadUrl = downloadUrl
        }

        public init(dictionary: [String: Any]) throws {
            self.layerDigest = dictionary["layerDigest"] as? String
            self.downloadUrl = dictionary["downloadUrl"] as? String
        }
    }

    public struct Image: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "imageManifest", required: false, type: .string), 
            AWSShapeProperty(label: "imageId", required: false, type: .structure), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The image manifest associated with the image.
        public let imageManifest: String?
        /// An object containing the image tag and image digest associated with an image.
        public let imageId: ImageIdentifier?
        /// The name of the repository associated with the image.
        public let repositoryName: String?
        /// The AWS account ID associated with the registry containing the image.
        public let registryId: String?

        public init(imageManifest: String? = nil, imageId: ImageIdentifier? = nil, repositoryName: String? = nil, registryId: String? = nil) {
            self.imageManifest = imageManifest
            self.imageId = imageId
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.imageManifest = dictionary["imageManifest"] as? String
            if let imageId = dictionary["imageId"] as? [String: Any] { self.imageId = try Ecr.ImageIdentifier(dictionary: imageId) } else { self.imageId = nil }
            self.repositoryName = dictionary["repositoryName"] as? String
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct CreateRepositoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app).
        public let repositoryName: String

        public init(repositoryName: String) {
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct GetRepositoryPolicyResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "policyText", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string)
        ]
        /// The JSON repository policy text associated with the repository.
        public let policyText: String?
        /// The registry ID associated with the request.
        public let registryId: String?
        /// The repository name associated with the request.
        public let repositoryName: String?

        public init(policyText: String? = nil, registryId: String? = nil, repositoryName: String? = nil) {
            self.policyText = policyText
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.policyText = dictionary["policyText"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.repositoryName = dictionary["repositoryName"] as? String
        }
    }

    public struct GetDownloadUrlForLayerRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "layerDigest", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The digest of the image layer to download.
        public let layerDigest: String
        /// The AWS account ID associated with the registry that contains the image layer to download. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository that is associated with the image layer to download.
        public let repositoryName: String

        public init(layerDigest: String, registryId: String? = nil, repositoryName: String) {
            self.layerDigest = layerDigest
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            guard let layerDigest = dictionary["layerDigest"] as? String else { throw InitializableError.missingRequiredParam("layerDigest") }
            self.layerDigest = layerDigest
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct ListImagesFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "tagStatus", required: false, type: .enum)
        ]
        /// The tag status with which to filter your ListImages results. You can filter results based on whether they are TAGGED or UNTAGGED.
        public let tagStatus: TagStatus?

        public init(tagStatus: TagStatus? = nil) {
            self.tagStatus = tagStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let tagStatus = dictionary["tagStatus"] as? String { self.tagStatus = TagStatus(rawValue: tagStatus) } else { self.tagStatus = nil }
        }
    }

    public struct SetRepositoryPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "force", required: false, type: .boolean), 
            AWSShapeProperty(label: "policyText", required: true, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// If the policy you are attempting to set on a repository policy would prevent you from setting another policy in the future, you must force the SetRepositoryPolicy operation. This is intended to prevent accidental repository lock outs.
        public let force: Bool?
        /// The JSON repository policy text to apply to the repository.
        public let policyText: String
        /// The name of the repository to receive the policy.
        public let repositoryName: String
        /// The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(force: Bool? = nil, policyText: String, repositoryName: String, registryId: String? = nil) {
            self.force = force
            self.policyText = policyText
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.force = dictionary["force"] as? Bool
            guard let policyText = dictionary["policyText"] as? String else { throw InitializableError.missingRequiredParam("policyText") }
            self.policyText = policyText
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct CreateRepositoryResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "repository", required: false, type: .structure)
        ]
        /// The repository that was created.
        public let repository: Repository?

        public init(repository: Repository? = nil) {
            self.repository = repository
        }

        public init(dictionary: [String: Any]) throws {
            if let repository = dictionary["repository"] as? [String: Any] { self.repository = try Ecr.Repository(dictionary: repository) } else { self.repository = nil }
        }
    }

    public struct BatchCheckLayerAvailabilityRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "layerDigests", required: true, type: .list), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The digests of the image layers to check.
        public let layerDigests: [String]
        /// The AWS account ID associated with the registry that contains the image layers to check. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository that is associated with the image layers to check.
        public let repositoryName: String

        public init(layerDigests: [String], registryId: String? = nil, repositoryName: String) {
            self.layerDigests = layerDigests
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            guard let layerDigests = dictionary["layerDigests"] as? [String] else { throw InitializableError.missingRequiredParam("layerDigests") }
            self.layerDigests = layerDigests
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct GetRepositoryPolicyRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository whose policy you want to retrieve.
        public let repositoryName: String

        public init(registryId: String? = nil, repositoryName: String) {
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct UploadLayerPartResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "uploadId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "lastByteReceived", required: false, type: .long)
        ]
        /// The upload ID associated with the request.
        public let uploadId: String?
        /// The repository name associated with the request.
        public let repositoryName: String?
        /// The registry ID associated with the request.
        public let registryId: String?
        /// The integer value of the last byte received in the request.
        public let lastByteReceived: Int64?

        public init(uploadId: String? = nil, repositoryName: String? = nil, registryId: String? = nil, lastByteReceived: Int64? = nil) {
            self.uploadId = uploadId
            self.repositoryName = repositoryName
            self.registryId = registryId
            self.lastByteReceived = lastByteReceived
        }

        public init(dictionary: [String: Any]) throws {
            self.uploadId = dictionary["uploadId"] as? String
            self.repositoryName = dictionary["repositoryName"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.lastByteReceived = dictionary["lastByteReceived"] as? Int64
        }
    }

    public struct BatchCheckLayerAvailabilityResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "failures", required: false, type: .list), 
            AWSShapeProperty(label: "layers", required: false, type: .list)
        ]
        /// Any failures associated with the call.
        public let failures: [LayerFailure]?
        /// A list of image layer objects corresponding to the image layer references in the request.
        public let layers: [Layer]?

        public init(failures: [LayerFailure]? = nil, layers: [Layer]? = nil) {
            self.failures = failures
            self.layers = layers
        }

        public init(dictionary: [String: Any]) throws {
            if let failures = dictionary["failures"] as? [[String: Any]] {
                self.failures = try failures.map({ try LayerFailure(dictionary: $0) })
            } else { 
                self.failures = nil
            }
            if let layers = dictionary["layers"] as? [[String: Any]] {
                self.layers = try layers.map({ try Layer(dictionary: $0) })
            } else { 
                self.layers = nil
            }
        }
    }

    public struct PutImageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "imageTag", required: false, type: .string), 
            AWSShapeProperty(label: "imageManifest", required: true, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The tag to associate with the image. This parameter is required for images that use the Docker Image Manifest V2 Schema 2 or OCI formats.
        public let imageTag: String?
        /// The image manifest corresponding to the image to be uploaded.
        public let imageManifest: String
        /// The name of the repository in which to put the image.
        public let repositoryName: String
        /// The AWS account ID associated with the registry that contains the repository in which to put the image. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(imageTag: String? = nil, imageManifest: String, repositoryName: String, registryId: String? = nil) {
            self.imageTag = imageTag
            self.imageManifest = imageManifest
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            self.imageTag = dictionary["imageTag"] as? String
            guard let imageManifest = dictionary["imageManifest"] as? String else { throw InitializableError.missingRequiredParam("imageManifest") }
            self.imageManifest = imageManifest
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
        }
    }

    public struct DescribeRepositoriesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "repositories", required: false, type: .list), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string)
        ]
        /// A list of repository objects corresponding to valid repositories.
        public let repositories: [Repository]?
        /// The nextToken value to include in a future DescribeRepositories request. When the results of a DescribeRepositories request exceed maxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(repositories: [Repository]? = nil, nextToken: String? = nil) {
            self.repositories = repositories
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let repositories = dictionary["repositories"] as? [[String: Any]] {
                self.repositories = try repositories.map({ try Repository(dictionary: $0) })
            } else { 
                self.repositories = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct InitiateLayerUploadRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The AWS account ID associated with the registry that you intend to upload layers to. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository that you intend to upload layers to.
        public let repositoryName: String

        public init(registryId: String? = nil, repositoryName: String) {
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public enum ImageFailureCode: String, CustomStringConvertible {
        case invalidimagedigest = "InvalidImageDigest"
        case invalidimagetag = "InvalidImageTag"
        case imagetagdoesnotmatchdigest = "ImageTagDoesNotMatchDigest"
        case imagenotfound = "ImageNotFound"
        case missingdigestandtag = "MissingDigestAndTag"
        public var description: String { return self.rawValue }
    }

    public struct DeleteRepositoryRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "force", required: false, type: .boolean), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// Force the deletion of the repository if it contains images.
        public let force: Bool?
        /// The AWS account ID associated with the registry that contains the repository to delete. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The name of the repository to delete.
        public let repositoryName: String

        public init(force: Bool? = nil, registryId: String? = nil, repositoryName: String) {
            self.force = force
            self.registryId = registryId
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.force = dictionary["force"] as? Bool
            self.registryId = dictionary["registryId"] as? String
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct PutImageResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "image", required: false, type: .structure)
        ]
        /// Details of the image uploaded.
        public let image: Image?

        public init(image: Image? = nil) {
            self.image = image
        }

        public init(dictionary: [String: Any]) throws {
            if let image = dictionary["image"] as? [String: Any] { self.image = try Ecr.Image(dictionary: image) } else { self.image = nil }
        }
    }

    public struct Repository: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "repositoryName", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryUri", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeProperty(label: "repositoryArn", required: false, type: .string)
        ]
        /// The name of the repository.
        public let repositoryName: String?
        /// The URI for the repository. You can use this URI for Docker push and pull operations.
        public let repositoryUri: String?
        /// The AWS account ID associated with the registry that contains the repository.
        public let registryId: String?
        /// The date and time, in JavaScript date/time format, when the repository was created.
        public let createdAt: String?
        /// The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the arn:aws:ecr namespace, followed by the region of the repository, the AWS account ID of the repository owner, the repository namespace, and then the repository name. For example, arn:aws:ecr:region:012345678910:repository/test.
        public let repositoryArn: String?

        public init(repositoryName: String? = nil, repositoryUri: String? = nil, registryId: String? = nil, createdAt: String? = nil, repositoryArn: String? = nil) {
            self.repositoryName = repositoryName
            self.repositoryUri = repositoryUri
            self.registryId = registryId
            self.createdAt = createdAt
            self.repositoryArn = repositoryArn
        }

        public init(dictionary: [String: Any]) throws {
            self.repositoryName = dictionary["repositoryName"] as? String
            self.repositoryUri = dictionary["repositoryUri"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.createdAt = dictionary["createdAt"] as? String
            self.repositoryArn = dictionary["repositoryArn"] as? String
        }
    }

    public struct BatchDeleteImageRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "imageIds", required: true, type: .list), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string)
        ]
        /// The AWS account ID associated with the registry that contains the image to delete. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// A list of image ID references that correspond to images to delete. The format of the imageIds reference is imageTag=tag or imageDigest=digest.
        public let imageIds: [ImageIdentifier]
        /// The repository that contains the image to delete.
        public let repositoryName: String

        public init(registryId: String? = nil, imageIds: [ImageIdentifier], repositoryName: String) {
            self.registryId = registryId
            self.imageIds = imageIds
            self.repositoryName = repositoryName
        }

        public init(dictionary: [String: Any]) throws {
            self.registryId = dictionary["registryId"] as? String
            guard let imageIds = dictionary["imageIds"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("imageIds") }
            self.imageIds = try imageIds.map({ try ImageIdentifier(dictionary: $0) })
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
        }
    }

    public struct CompleteLayerUploadResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "uploadId", required: false, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: false, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "layerDigest", required: false, type: .string)
        ]
        /// The upload ID associated with the layer.
        public let uploadId: String?
        /// The repository name associated with the request.
        public let repositoryName: String?
        /// The registry ID associated with the request.
        public let registryId: String?
        /// The sha256 digest of the image layer.
        public let layerDigest: String?

        public init(uploadId: String? = nil, repositoryName: String? = nil, registryId: String? = nil, layerDigest: String? = nil) {
            self.uploadId = uploadId
            self.repositoryName = repositoryName
            self.registryId = registryId
            self.layerDigest = layerDigest
        }

        public init(dictionary: [String: Any]) throws {
            self.uploadId = dictionary["uploadId"] as? String
            self.repositoryName = dictionary["repositoryName"] as? String
            self.registryId = dictionary["registryId"] as? String
            self.layerDigest = dictionary["layerDigest"] as? String
        }
    }

    public struct UploadLayerPartRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "uploadId", required: true, type: .string), 
            AWSShapeProperty(label: "layerPartBlob", required: true, type: .blob), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "partLastByte", required: true, type: .long), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "partFirstByte", required: true, type: .long)
        ]
        /// The upload ID from a previous InitiateLayerUpload operation to associate with the layer part upload.
        public let uploadId: String
        /// The base64-encoded layer part payload.
        public let layerPartBlob: Data
        /// The name of the repository that you are uploading layer parts to.
        public let repositoryName: String
        /// The integer value of the last byte of the layer part.
        public let partLastByte: Int64
        /// The AWS account ID associated with the registry that you are uploading layer parts to. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The integer value of the first byte of the layer part.
        public let partFirstByte: Int64

        public init(uploadId: String, layerPartBlob: Data, repositoryName: String, partLastByte: Int64, registryId: String? = nil, partFirstByte: Int64) {
            self.uploadId = uploadId
            self.layerPartBlob = layerPartBlob
            self.repositoryName = repositoryName
            self.partLastByte = partLastByte
            self.registryId = registryId
            self.partFirstByte = partFirstByte
        }

        public init(dictionary: [String: Any]) throws {
            guard let uploadId = dictionary["uploadId"] as? String else { throw InitializableError.missingRequiredParam("uploadId") }
            self.uploadId = uploadId
            guard let layerPartBlob = dictionary["layerPartBlob"] as? Data else { throw InitializableError.missingRequiredParam("layerPartBlob") }
            self.layerPartBlob = layerPartBlob
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            guard let partLastByte = dictionary["partLastByte"] as? Int64 else { throw InitializableError.missingRequiredParam("partLastByte") }
            self.partLastByte = partLastByte
            self.registryId = dictionary["registryId"] as? String
            guard let partFirstByte = dictionary["partFirstByte"] as? Int64 else { throw InitializableError.missingRequiredParam("partFirstByte") }
            self.partFirstByte = partFirstByte
        }
    }

    public struct CompleteLayerUploadRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "uploadId", required: true, type: .string), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string), 
            AWSShapeProperty(label: "layerDigests", required: true, type: .list)
        ]
        /// The upload ID from a previous InitiateLayerUpload operation to associate with the image layer.
        public let uploadId: String
        /// The name of the repository to associate with the image layer.
        public let repositoryName: String
        /// The AWS account ID associated with the registry to which to upload layers. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?
        /// The sha256 digest of the image layer.
        public let layerDigests: [String]

        public init(uploadId: String, repositoryName: String, registryId: String? = nil, layerDigests: [String]) {
            self.uploadId = uploadId
            self.repositoryName = repositoryName
            self.registryId = registryId
            self.layerDigests = layerDigests
        }

        public init(dictionary: [String: Any]) throws {
            guard let uploadId = dictionary["uploadId"] as? String else { throw InitializableError.missingRequiredParam("uploadId") }
            self.uploadId = uploadId
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
            guard let layerDigests = dictionary["layerDigests"] as? [String] else { throw InitializableError.missingRequiredParam("layerDigests") }
            self.layerDigests = layerDigests
        }
    }

    public enum TagStatus: String, CustomStringConvertible {
        case tagged = "TAGGED"
        case untagged = "UNTAGGED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeImagesFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "tagStatus", required: false, type: .enum)
        ]
        /// The tag status with which to filter your DescribeImages results. You can filter results based on whether they are TAGGED or UNTAGGED.
        public let tagStatus: TagStatus?

        public init(tagStatus: TagStatus? = nil) {
            self.tagStatus = tagStatus
        }

        public init(dictionary: [String: Any]) throws {
            if let tagStatus = dictionary["tagStatus"] as? String { self.tagStatus = TagStatus(rawValue: tagStatus) } else { self.tagStatus = nil }
        }
    }

    public struct ListImagesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "filter", required: false, type: .structure), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "maxResults", required: false, type: .integer), 
            AWSShapeProperty(label: "repositoryName", required: true, type: .string), 
            AWSShapeProperty(label: "registryId", required: false, type: .string)
        ]
        /// The filter key and value with which to filter your ListImages results.
        public let filter: ListImagesFilter?
        /// The nextToken value returned from a previous paginated ListImages request where maxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the nextToken value. This value is null when there are no more results to return.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes. 
        public let nextToken: String?
        /// The maximum number of image results returned by ListImages in paginated output. When this parameter is used, ListImages only returns maxResults results in a single page along with a nextToken response element. The remaining results of the initial request can be seen by sending another ListImages request with the returned nextToken value. This value can be between 1 and 100. If this parameter is not used, then ListImages returns up to 100 results and a nextToken value, if applicable.
        public let maxResults: Int32?
        /// The repository whose image IDs are to be listed.
        public let repositoryName: String
        /// The AWS account ID associated with the registry that contains the repository to list images in. If you do not specify a registry, the default registry is assumed.
        public let registryId: String?

        public init(filter: ListImagesFilter? = nil, nextToken: String? = nil, maxResults: Int32? = nil, repositoryName: String, registryId: String? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.repositoryName = repositoryName
            self.registryId = registryId
        }

        public init(dictionary: [String: Any]) throws {
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Ecr.ListImagesFilter(dictionary: filter) } else { self.filter = nil }
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
            guard let repositoryName = dictionary["repositoryName"] as? String else { throw InitializableError.missingRequiredParam("repositoryName") }
            self.repositoryName = repositoryName
            self.registryId = dictionary["registryId"] as? String
        }
    }

}